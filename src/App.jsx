import { useState, useEffect } from 'react';
import './App.css';

// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç Telegram Web App
const tg = window.Telegram.WebApp;

function App() {
  const [debts, setDebts] = useState([]); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–ª–≥–æ–≤
  const [loading, setLoading] = useState(true); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  const [error, setError] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏

  // useEffect –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è
  useEffect(() => {
    // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç—å –∞–ø–ø–∫—É
    tg.BackButton.show();
    tg.onEvent('backButtonClicked', () => tg.close());

    const fetchDebts = async () => {
      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö Telegram
      const userId = tg.initDataUnsafe?.user?.id;

      if (!userId) {
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.");
        setLoading(false);
        return;
      }

      try {
        // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–∞—à–µ–º—É API.
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, Vercel —Å–∞–º –ø–æ–π–º–µ—Ç, –∫—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å.
        const response = await fetch(`/api/getDebts?userId=${userId}`);
        if (!response.ok) {
          throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞');
        }
        const data = await response.json();
        setDebts(data); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      } catch (e) {
        setError(e.message); // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ
      } finally {
        setLoading(false); // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —É–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      }
    };

    fetchDebts();
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ [] –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

  // --- –ù–∏–∂–µ –∏–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π ---

  if (loading) {
    return <div className="app-container">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  if (error) {
    return <div className="app-container">–û—à–∏–±–∫–∞: {error}</div>;
  }
  
  const totalAmount = debts.reduce((sum, debt) => sum + debt.amount, 0);

  return (
    <div className="app-container">
      {debts.length === 0 ? (
        <div className="no-debts">
          <h2>–¢—ã –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–ª–∂–µ–Ω! üéâ</h2>
          <p>–ú–æ–∂–Ω–æ —Å–ø–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ.</p>
        </div>
      ) : (
        <>
          <div className="total-debt">
            <span>–û–±—â–∏–π –¥–æ–ª–≥:</span>
            <h1>{totalAmount.toFixed(2)} ‚ÇΩ</h1>
          </div>
          <div className="debt-history">
            <h3>–ò—Å—Ç–æ—Ä–∏—è:</h3>
            {debts.map((debt) => (
              <div key={debt.id} className="debt-item">
                <div className="debt-info">
                  <span className="debt-description">{debt.description}</span>
                  <span className="debt-date">
                    {new Date(debt.createdAt).toLocaleDateString('ru-RU')}
                  </span>
                </div>
                <div className="debt-amount">{debt.amount.toFixed(2)} ‚ÇΩ</div>
              </div>
            ))}
          </div>
        </>
      )}
    </div>
  );
}

export default App;