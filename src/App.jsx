import { useState, useEffect } from 'react';
import './App.css';

const tg = window.Telegram.WebApp;

function App() {
  const [debts, setDebts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const [newAmount, setNewAmount] = useState('');
  const [newDescription, setNewDescription] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    tg.BackButton.show();
    tg.onEvent('backButtonClicked', () => tg.close());

    const fetchDebts = async () => {
      const userId = tg.initDataUnsafe?.user?.id;
      if (!userId) {
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.");
        setLoading(false);
        return;
      }

      try {
        const response = await fetch(`/api/getDebts?userId=${userId}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞');
        const data = await response.json();
        setDebts(data);
      } catch (e) {
        setError(e.message);
      } finally {
        setLoading(false);
      }
    };

    fetchDebts();
  }, []);

  // --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –î–û–õ–ì–ê ---
  const handleAddDebt = async (e) => {
    e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã

    if (!newAmount || !newDescription || isSubmitting) {
      return; // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ –∏–ª–∏ —É–∂–µ –∏–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞
    }

    setIsSubmitting(true);
    const userId = tg.initDataUnsafe?.user?.id;

    try {
      const response = await fetch('/api/addDebt', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: userId,
          amount: parseFloat(newAmount),
          description: newDescription,
        }),
      });

      if (!response.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥');

      const newDebt = await response.json();

      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –¥–æ–ª–≥ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
      // –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞.
      setDebts([newDebt, ...debts]);

      // –û—á–∏—â–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
      setNewAmount('');
      setNewDescription('');

    } catch (error) {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      console.error(error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞.');
    } finally {
      setIsSubmitting(false);
    }
  };


  if (loading) return <div className="app-container">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (error) return <div className="app-container">–û—à–∏–±–∫–∞: {error}</div>;
  
  const totalAmount = debts.reduce((sum, debt) => sum + debt.amount, 0);

  return (
    <div className="app-container">
      {/* --- –ù–û–í–ê–Ø –§–û–†–ú–ê --- */}
      <form onSubmit={handleAddDebt} className="add-debt-form">
        <h3>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–ª–≥</h3>
        <div className="form-group">
          <input
            type="number"
            placeholder="–°—É–º–º–∞"
            value={newAmount}
            onChange={(e) => setNewAmount(e.target.value)}
            required
          />
          <input
            type="text"
            placeholder="–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞ —á—Ç–æ?)"
            value={newDescription}
            onChange={(e) => setNewDescription(e.target.value)}
            required
          />
        </div>
        <button type="submit" disabled={isSubmitting}>
          {isSubmitting ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å'}
        </button>
      </form>
      
      {debts.length === 0 ? (
        <div className="no-debts">
          <h2>–¢—ã –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–ª–∂–µ–Ω! üéâ</h2>
          <p>–ú–æ–∂–Ω–æ —Å–ø–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ.</p>
        </div>
      ) : (
        <>
          <div className="total-debt">
            <span>–û–±—â–∏–π –¥–æ–ª–≥:</span>
            <h1>{totalAmount.toFixed(2)} ‚ÇΩ</h1>
          </div>
          <div className="debt-history">
            <h3>–ò—Å—Ç–æ—Ä–∏—è:</h3>
            {debts.map((debt) => (
              <div key={debt.id} className="debt-item">
                <div className="debt-info">
                  <span className="debt-description">{debt.description}</span>
                  <span className="debt-date">
                    {new Date(debt.createdAt).toLocaleDateString('ru-RU')}
                  </span>
                </div>
                <div className="debt-amount">{debt.amount.toFixed(2)} ‚ÇΩ</div>
              </div>
            ))}
          </div>
        </>
      )}
    </div>
  );
}

export default App;