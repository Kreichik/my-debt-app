import { useState, useEffect } from 'react';
import './App.css';

const tg = window.Telegram.WebApp;
const ADMIN_ID = 918550382; // –¢–≤–æ–π ID

function App() {
  const [debts, setDebts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  const [newAmount, setNewAmount] = useState('');
  const [newDescription, setNewDescription] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const user = tg.initDataUnsafe?.user;
  const isOwner = user?.id === ADMIN_ID; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—à—å—Å—è –ª–∏ —Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–µ–º

  useEffect(() => {
    tg.BackButton.show();
    tg.onEvent('backButtonClicked', () => tg.close());

    const fetchDebts = async () => {
      // –í–∞–∂–Ω–æ: —Ç–µ–ø–µ—Ä—å –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –∫ –∑–∞–ø—Ä–æ—Å—É id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–º–æ—Ç—Ä–∏–º –¥–æ–ª–≥–∏.
      // –ï—Å–ª–∏ —ç—Ç–æ —Ç—ã, —Ç–æ —Ç—ã —Å–º–æ—Ç—Ä–∏—à—å —Å–∞–º –Ω–∞ —Å–µ–±—è. –ï—Å–ª–∏ –¥—Ä—É–≥–æ–π - —Ç–æ –Ω–∞ –Ω–µ–≥–æ.
      const targetUserId = user?.id;
      if (!targetUserId) {
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.");
        setLoading(false);
        return;
      }
      try {
        const response = await fetch(`/api/getDebts?userId=${targetUserId}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞');
        const data = await response.json();
        setDebts(data);
      } catch (e) {
        setError(e.message);
      } finally {
        setLoading(false);
      }
    };
    fetchDebts();
  }, [user?.id]); // –î–æ–±–∞–≤–ª—è–µ–º user.id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã useEffect –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª—Å—è –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —é–∑–µ—Ä —Å–º–µ–Ω–∏—Ç—Å—è

  const handleAddDebt = async (e) => {
    e.preventDefault();
    if (!newAmount || !newDescription || isSubmitting) return;

    setIsSubmitting(true);
    
    // –í–ê–ñ–ù–û: –ú—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º `initData` –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!
    try {
      const response = await fetch('/api/addDebt', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: user?.id, // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ª–≥ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          amount: parseFloat(newAmount),
          description: newDescription,
          initData: tg.initData, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
        }),
      });
      if (!response.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥');
      const newDebt = await response.json();
      setDebts([newDebt, ...debts]);
      setNewAmount('');
      setNewDescription('');
    } catch (error) {
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞.');
    } finally {
      setIsSubmitting(false);
    }
  };
  
  if (loading) return <div className="app-container">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (error) return <div className="app-container">–û—à–∏–±–∫–∞: {error}</div>;

  const totalAmount = debts.reduce((sum, debt) => sum + debt.amount, 0);

  return (
    <div className="app-container">
      {/* –§–æ—Ä–º–∞ –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ isOwner === true */}
      {isOwner && (
        <form onSubmit={handleAddDebt} className="add-debt-form">
          <h3>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–ª–≥</h3>
          <div className="form-group">
            <input type="number" placeholder="–°—É–º–º–∞" value={newAmount} onChange={(e) => setNewAmount(e.target.value)} required />
            <input type="text" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ" value={newDescription} onChange={(e) => setNewDescription(e.target.value)} required />
          </div>
          <button type="submit" disabled={isSubmitting}>
            {isSubmitting ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å'}
          </button>
        </form>
      )}

      {debts.length === 0 ? (
        <div className="no-debts">
          <h2>–î–æ–ª–≥–æ–≤ –Ω–µ—Ç! üéâ</h2>
          <p>–í—Å–µ —á–∏—Å—Ç–æ.</p>
        </div>
      ) : (
        <>
          <div className="total-debt">
            <span>–û–±—â–∏–π –¥–æ–ª–≥:</span>
            <h1>{totalAmount.toLocaleString('ru-RU')} ‚Ç∏</h1>
          </div>
          <div className="debt-history">
            <h3>–ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–≥–æ–≤:</h3>
            {debts.map((debt) => (
              <div key={debt.id} className="debt-card">
                <div className="debt-card-header">
                  <span className="debt-amount">{debt.amount.toLocaleString('ru-RU')} ‚Ç∏</span>
                  <span className="debt-date">
                    {new Date(debt.createdAt).toLocaleDateString('ru-RU')}
                  </span>
                </div>
                <div className="debt-card-body">
                  <p>{debt.description}</p>
                </div>
              </div>
            ))}
          </div>
        </>
      )}
    </div>
  );
}

export default App;