import { useState, useEffect } from 'react';
// –ù–µ –Ω—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å App.css, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ App.jsx

const tg = window.Telegram.WebApp;

export default function UserView() {
  const [debts, setDebts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const user = tg.initDataUnsafe?.user;

  useEffect(() => {
  tg.BackButton.show();
  tg.onEvent('backButtonClicked', () => tg.close());

  const initializeUser = async () => {
    if (!user?.id) {
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
      setLoading(false);
      return;
    }

    try {
      // --- –ù–û–í–´–ô –ë–õ–û–ö: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
      // –≠—Ç–æ "—Ç–∏—Ö–∏–π" –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ —é–∑–µ—Ä–∞ –≤ –ë–î
      await fetch('/api/registerUser', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId: user.id }),
      });
      // ---------------------------------------------

      // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–≥–æ–≤ (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –±—ã–ª–æ)
      const response = await fetch(`/api/getDebts?userId=${user.id}`);
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
      const data = await response.json();
      setDebts(data.filter(d => d.status === 'UNPAID'));
    } catch (e) {
      setError(e.message);
    } finally {
      setLoading(false);
    }
  };

  initializeUser();
}, [user?.id]);

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (error) return <div>–û—à–∏–±–∫–∞: {error}</div>;

  const totalAmount = debts.reduce((sum, debt) => sum + debt.amount, 0);

  return (
    <>
      {debts.length === 0 ? (
        <div className="no-debts">
          <h2>–î–æ–ª–≥–æ–≤ –Ω–µ—Ç! üéâ</h2>
        </div>
      ) : (
        <>
          <div className="total-debt">
            <span>–û–±—â–∏–π –¥–æ–ª–≥:</span>
            <h1>{totalAmount.toLocaleString('ru-RU')} ‚Ç∏</h1>
          </div>
          <div className="debt-history">
            <h3>–ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–≥–æ–≤:</h3>
            {debts.map((debt) => (
              <div key={debt.id} className="debt-card">
                <div className="debt-card-header">
                  <span className="debt-amount">{debt.amount.toLocaleString('ru-RU')} ‚Ç∏</span>
                  <span className="debt-date">{new Date(debt.issuedAt).toLocaleDateString('ru-RU')}</span>
                </div>
                <div className="debt-card-body"><p>{debt.description}</p></div>
              </div>
            ))}
          </div>
        </>
      )}
    </>
  );
}